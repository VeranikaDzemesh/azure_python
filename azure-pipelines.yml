# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-16.04'
variables:
  python.version: '3.7'
 
steps:

- script: |
    sudo apt-add-repository ppa:qameta/allure
    sudo apt-get update
    sudo apt-get install allure
  displayName: 'Install Allure'

- task: UsePythonVersion@0
  inputs:
    versionSpec: $(python.version)
    addToPath: true      
    
- script: 'python -m pip install --upgrade pip && pip install -r requirements.txt'
  displayName: 'Install dependencies'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'MY_USER=$(id -u):$(id -g) docker-compose up -d allure allure-ui'
  displayName: 'Deploy allure docker server'

- script: 'ls -la'
  displayName: 'Show all files'  
  
- task: CmdLine@2
  inputs:
    script: 'curl -X POST  -H "Accept: Application/json" -H "Content-Type: application/json" http://localhost:5050/allure-docker-service/projects -d ''{"id":"azure-python"}'' | grep }| python -mjson.tool'

- script: 'py.test -o junit_family=xunit2 --junitxml=test-results.xml --alluredir=allure-results tests'
  continueOnError: true 
  displayName: 'Run tests'  

- script: 'ls -la && cd projects &&  ls -la'
  displayName: 'Show all files'  

- task: PublishTestResults@2
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: 'test-results.xml'
    testRunTitle: 'my_test_results'        
    publishRunAttachments: true
  displayName: 'Publish as Junit'

    
- task: ivang7.allure-test-reports.allure-generate.AllureGenerate@1
  continueOnError: true 
  inputs:
    resultsDir: 'allure-results'
    targetDir: 'allure-report/$(Build.BuildNumber)'
  displayName: 'Generate Allure Report'

